{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = set;\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\nvar _index2 = _interopRequireDefault(require(\"../setMonth/index.js\"));\nvar _index3 = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\nvar _index4 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nfunction set(dirtyDate, values) {\n  (0, _index4.default)(2, arguments);\n  if (_typeof(values) !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n  var date = (0, _index.default)(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n  if (values.month != null) {\n    date = (0, _index2.default)(date, values.month);\n  }\n  if (values.date != null) {\n    date.setDate((0, _index3.default)(values.date));\n  }\n  if (values.hours != null) {\n    date.setHours((0, _index3.default)(values.hours));\n  }\n  if (values.minutes != null) {\n    date.setMinutes((0, _index3.default)(values.minutes));\n  }\n  if (values.seconds != null) {\n    date.setSeconds((0, _index3.default)(values.seconds));\n  }\n  if (values.milliseconds != null) {\n    date.setMilliseconds((0, _index3.default)(values.milliseconds));\n  }\n  return date;\n}\nmodule.exports = exports.default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","set","_index","_interopRequireDefault","require","_index2","_index3","_index4","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","dirtyDate","values","arguments","RangeError","date","isNaN","getTime","Date","NaN","year","setFullYear","month","setDate","hours","setHours","minutes","setMinutes","seconds","setSeconds","milliseconds","setMilliseconds","module"],"sources":["C:/Users/Cotan/PROJET REACT/mern/frontend/node_modules/date-fns/set/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = set;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../setMonth/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nfunction set(dirtyDate, values) {\n  (0, _index4.default)(2, arguments);\n\n  if (_typeof(values) !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n\n  var date = (0, _index.default)(dirtyDate); // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n\n  if (values.month != null) {\n    date = (0, _index2.default)(date, values.month);\n  }\n\n  if (values.date != null) {\n    date.setDate((0, _index3.default)(values.date));\n  }\n\n  if (values.hours != null) {\n    date.setHours((0, _index3.default)(values.hours));\n  }\n\n  if (values.minutes != null) {\n    date.setMinutes((0, _index3.default)(values.minutes));\n  }\n\n  if (values.seconds != null) {\n    date.setSeconds((0, _index3.default)(values.seconds));\n  }\n\n  if (values.milliseconds != null) {\n    date.setMilliseconds((0, _index3.default)(values.milliseconds));\n  }\n\n  return date;\n}\n\nmodule.exports = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}